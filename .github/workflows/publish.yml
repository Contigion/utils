name: Publish to PyPI

on:
  push:
    branches: [ main ]
    paths:
      - "contigion-utils/**"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PACKAGE_NAME: "contigion-utils"
  OWNER: "Contigion"

jobs:
  pylint:
    name: Pylint
    runs-on: ${{ vars.OS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ vars.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}

      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Analyse code
        run: |
          pylint --max-line-length=120 --disable=missing-module-docstring,missing-function-docstring,invalid-name,broad-exception-caught,broad-exception-raised,raise-missing-from $(git ls-files '*.py')

  details:
    name: Get Details for Future Jobs
    runs-on: ${{ vars.OS }}

    outputs:
      new_version: ${{ steps.values.outputs.new_version }}
      suffix: ${{ steps.values.outputs.suffix }}
      tag_name: ${{ steps.values.outputs.tag_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract tag name
        id: values
        shell: bash
        run: |
          PR_BRANCH=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls?state=closed \
            | jq -r ".[] | select(.base.ref == \"main\" and .merged_at != null) | .head.ref" | head -n 1)

          if [ -n "$PR_BRANCH" ]; then
            echo "BRANCH_NAME=${BRANCH_NAME}"
          else
            echo "No merged branches found"
            exit 1
          fi

          TAG_NAME=$PR_BRANCH
          NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
          SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          echo "Version is $NEW_VERSION"
          echo "Suffix is $SUFFIX"
          echo "Tag name is $TAG_NAME"

  check-version:
    name: Check Last Published Version
    needs: details
    runs-on: ${{ vars.OS }}

    steps:
      - name: Fetch information from PyPI
        shell: bash
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        shell: bash
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  publish:
    name: Publish to PyPi
    needs: [ check-version, details]
    runs-on: ${{ vars.UBUNTU }}

    environment:
      name: pypi
      url: https://pypi.org/p/${{ env.PACKAGE_NAME }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ vars.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}

      - name: Install build tools
        run: pip install build

      - name: Update version in pyproject.toml
        run: |
          if ! [[ "${{ needs.details.outputs.tag_name }}" =~ ^[0-9]+(\.[0-9]+)*([a-zA-Z0-9.-]+)?$ ]]; then
            echo "Invalid version: ${{ needs.details.outputs.tag_name }}"
            exit 1
          fi
          
          sed -i "s/^version = \".*\"/version = \"${{ needs.details.outputs.tag_name }}\"/" pyproject.toml

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  changelog:
    name: Generate Changelog
    runs-on: ${{ vars.OS }}
    needs: [ pylint, publish ]

    steps:
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          conventional-changelog -p angular -n ./changelog_config.js > CHANGELOG_TEMP.md
          if [[ -s CHANGELOG_TEMP.md ]]; then
            cat CHANGELOG_TEMP.md > CHANGELOG.md
            CHANGES_CONTENT=$(cat CHANGELOG.md)
            echo -e "CONTENT<<EOF\n$CHANGES_CONTENT\nEOF" >> $GITHUB_ENV
          else
            echo "CONTENT=No changes for changelog" >> $GITHUB_ENV
          fi 

  tag:
    name: Create Tag
    needs: [ changelog, details ]
    runs-on: ${{ vars.OS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create tag
        shell: bash
        run: |
          git config --local user.name 'GitHub Actions Bot'
          git config --local user.email 'actions@github.com'
          git tag ${{ needs.details.outputs.tag_name }}
          git push --tags

  release:
    name:  Create Release
    needs: [ tag, details ]
    runs-on: ${{ vars.OS }}

    steps:
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.details.outputs.tag_name }}
          release_name: ${{ needs.details.outputs.tag_name }}
          body: ${{ env.CONTENT }}
          draft: false
          prerelease: false