name: Create Pull Requests to Main

on:
  push:
    branches: [ "[0-9]+.[0-9]+.[0-9]+", "release/**" ]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create-pr:
    name: Create Pull Request
    runs-on: ${{ vars.OS }}

    outputs:
      pr_exists: ${{ steps.create-pr.pr.pr_exists }}
      changes_exist: ${{ steps.create-pr.changes.changes_exist }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get branch name
        shell: bash
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF}" | sed 's/refs\/heads\///')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Check if PR exists
        id: pr
        shell: bash
        run: |
          PR_EXISTS=$(gh pr list --state open --head "${{ env.BRANCH_NAME }}" --json number -q '.[].number')
          if [ -z "$PR_EXISTS" ]; then
            echo "Creating PR to main."
            echo "pr_exists=false" >> "$GITHUB_OUTPUT"
          else
            echo "PR already exists, skipping PR creation."
            echo "pr_exists=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for changes in branch
        id: changes
        shell: bash
        run: |
          git fetch origin main
          git fetch origin ${{ env.BRANCH_NAME }}
      
          CHANGES=$(git diff --name-only origin/main origin/${{ env.BRANCH_NAME }})
      
          if [ -z "$CHANGES" ]; then
            echo "No changes found, skipping PR creation."
            echo "changes_exist=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes found main -> ${{ env.BRANCH_NAME}}"
            echo "changes_exist=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request to main
        if: ${{ steps.pr.outputs.pr_exists }} == 'false' && ${{ steps.changes.outputs.changes_exist }}. == 'true'
        shell: bash
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          PR_TITLE="Merge ${{ env.BRANCH_NAME }} into main"
          gh pr create --base main --head "${{ env.BRANCH_NAME }}" --title "$PR_TITLE" --body "This PR is automatically created from the release branch to the main branch."

  pylint:
    if: ${{ needs.create-pr.outputs.pr_exist }} == 'false' && ${{ needs.create-pr.outputs.changes_exist }} == 'true'
    name: Pylint
    needs: create-pr
    runs-on: ${{ vars.OS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ vars.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}

      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Analyse code
        run: |
          pylint --max-line-length=120 --disable=missing-module-docstring,missing-function-docstring,invalid-name,broad-exception-caught,broad-exception-raised,raise-missing-from $(git ls-files '*.py')
